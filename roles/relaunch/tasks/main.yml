---
- name: Find current process
  shell: ps elx | grep "[j]ava -jar java-server" | tr -s ' ' | cut -d ' ' -f 3
  register: found_process
  ignore_errors: True
  always_run: yes

- name: Stop current process
  shell: "kill {{found_process.stdout}}"
  when: found_process.stdout != ""

## Idea, not implemented, for a more portable version
# - action: shell ps elx | grep "[j]ava -jar tracker-server" | tr -s ' ' | cut -d ' ' -f 3
#   register: still_there
#   until: still_there == ""
#   retries: 5
#   delay: 5

## Only on Linux work this will
- name: Wait for process to finish
  wait_for:
    path: "/proc/{{found_process.stdout}}/status"
    state: absent
  when: found_process.stdout != ""

## - name: Use the right Java if needed
##  shell: module load java/8

- name: Start new process
  shell: nohup {{java_executable}} -jar java-server-{{java_server_version}}.jar tracker.xml > nohup.out 2>&1& chdir={{webapp_directory}}

## Note the grep trick here to make sure grep doesn't actually find itself
- name: Find new process
  shell: ps elx | grep "[j]ava -jar java-server" | tr -s ' ' | cut -d ' ' -f 3
  register: started_process
  ignore_errors: True

- name: Write new process identifier into a new file
  copy:
    content: "{{started_process.stdout}}"
    dest: "{{ansible_env.HOME}}/tracker.pid"
