<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/util
	                    http://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
    </bean>

    <bean id="securityManager" class="ca.uhnresearch.pughlab.tracker.security.AuditedSecurityManager">
        <property name="cacheManager" ref="cacheManager" />
        <property name="realms" ref="securityRealms" />
        <property name="auditLogRepository" ref="auditLogRepository" />
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="authorizationRealm" class="ca.uhnresearch.pughlab.tracker.security.JdbcAuthorizingRealm">
        <property name="dataSource" ref="dataSource" />
        <property name="permissionsLookupEnabled" value="true" />
        <property name="userRolesQuery">
            <value>
                SELECT R.NAME
                FROM USER_ROLES UR
                JOIN ROLES R ON UR.ROLE_ID = R.ID
                WHERE UR.USERNAME = LOWER(?)
            </value>
        </property>
        <property name="permissionsQuery">
            <value>
                SELECT CASE WHEN S.ID = 0 THEN RP.PERMISSION ELSE CONCAT(S.NAME, ':', RP.PERMISSION) END
                FROM ROLES R
                JOIN ROLE_PERMISSIONS RP ON RP.ROLE_ID = R.ID
                JOIN STUDIES S ON R.STUDY_ID = S.ID
                WHERE R.NAME = ?
            </value>
        </property>
    </bean>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="authorizationRepository" />
        <property name="targetMethod">
            <value>setAuthorizingRealm</value>
        </property>
        <property name="arguments">
            <list>
                <ref bean="authorizationRealm" />
            </list>
        </property>
    </bean>

    <util:list id="securityRealms" value-type="org.apache.shiro.realm.Realm">
        <ref bean="authenticationRealm" />
        <ref bean="authorizationRealm" />
    </util:list>

    <bean id="sessionAccessFilter" class="ca.uhnresearch.pughlab.tracker.security.SessionAccessFilter">
        <property name="authcScheme" value="session" />
        <property name="prompt" value="{{authentication.prompt}}" />
    </bean>

    <bean id="sessionAuthenticationFilter" class="ca.uhnresearch.pughlab.tracker.security.SessionAuthenticationFilter">
        <property name="loginUrl" value="/api/authentication/login" />
        <property name="successUrl" value="/api/studies" />
        <property name="authcScheme" value="session" />
    </bean>

{% if authentication.type == 'AD-MULTIPLE' %}
    <bean id="authenticationRealm" class="ca.uhnresearch.pughlab.tracker.security.LdapRealm">
        <property name="ldapContexts">
            <util:list>
{% for server in authentication.servers %}
                <ref bean="{{ server.key }}" />
{% endfor %}
            </util:list>
        </property>
    </bean>
{% for server in authentication.servers %}
		<bean id="{{ server.key }}" class="ca.uhnresearch.pughlab.tracker.security.DomainLdapContext">
			{% for property in ['domain', 'ldapHost', 'ldapPort', 'timeout', 'searchTemplate', 'filterTemplate' ] %}
			{% if server.properties[property] %}<property name="{{property}}" value="{{server.properties[property]}}" />{% endif %}
			{% endfor %}
		</bean>
{% endfor %}
{% endif %}

{% if authentication.type == 'LDAP-SINGLE' %}
		<bean id="{{ authentication.servers[0].key }}ContextFactory" class="org.apache.shiro.realm.ldap.JndiLdapContextFactory">
				<property name="url" value="{{ authentication.servers[0].properties.url }}" />
				<property name="authenticationMechanism" value="{{ authentication.servers[0].properties.authenticationMechanism }}" />
		</bean>
		<bean id="authenticationRealm" class="org.apache.shiro.realm.ldap.JndiLdapRealm">
				<property name="contextFactory" ref="{{ authentication.servers[0].key }}ContextFactory" />
				{% for property in ['userDnTemplate' ] %}
				{% if authentication.servers[0].properties[property] %}<property name="{{property}}" value="{{authentication.servers[0].properties[property]}}" />{% endif %}
				{% endfor %}
		</bean>
{% endif %}

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>

        <property name="filters">
            <util:map>
                <entry key="sessionAuthentication" value-ref="sessionAuthenticationFilter" />
                <entry key="sessionAccess" value-ref="sessionAccessFilter" />
            </util:map>
        </property>

        <property name="filterChainDefinitions">
            <value>
                /api/authentication/login = sessionAuthentication
                /api/authentication/logout = logout
                /api/** = sessionAccess
                /events/** = sessionAccess
                /** = anon
            </value>
        </property>
    </bean>
</beans>
